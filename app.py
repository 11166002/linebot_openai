from flask import Flask, request, jsonify, render_template, abort
import os, base64, cv2
from skimage.metrics import structural_similarity as ssim
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import *
import mysql.connector
from mysql.connector import Error

# ‚îÄ‚îÄ üîë Required ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LINE_CHANNEL_ACCESS_TOKEN = "liqx01baPcbWbRF5if7oqBsZyf2+2L0eTOwvbIJ6f2Wec6is4sVd5onjl4fQAmc4n8EuqMfo7prlaG5la6kXb/y1gWOnk8ztwjjx2ZnukQbPJQeDwwcPEdFTOGOmQ1t88bQLvgQVczlzc/S9Q/6y5gdB04t89/1O/w1cDnyilFU="
LINE_CHANNEL_SECRET       = "cd9fbd2ce22b12f243c5fcd2d97e5680"
LIFF_URL                  = "https://liff.line.me/2007396139-Q0E29b2o"
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

BASE_DIR = os.path.abspath(os.path.dirname(__file__))

app = Flask(
    __name__,
    template_folder=os.path.join(BASE_DIR, "templates"),
    static_folder=os.path.join(BASE_DIR, "static")
)

UPLOAD_FOLDER = os.path.join(BASE_DIR, "static")
SAMPLE_FOLDER = os.path.join(BASE_DIR, "samples")
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(SAMPLE_FOLDER, exist_ok=True)

def compare_images(user_img_path: str, correct_img_path: str) -> float:
    img1 = cv2.imread(user_img_path, cv2.IMREAD_GRAYSCALE)
    img2 = cv2.imread(correct_img_path, cv2.IMREAD_GRAYSCALE)
    if img1 is None or img2 is None:
        raise FileNotFoundError("‚ùå Unable to load image (user or sample)")
    img1, img2 = [cv2.resize(i, (200, 200)) for i in (img1, img2)]
    score, _ = ssim(img1, img2, full=True)
    return score

# ‚úÖ Âä†ÂÖ•ÈÄôÊÆµÔºöË≥áÊñôÂ∫´ÈÄ£Á∑öÂáΩÂºè
def get_db_connection():
    return mysql.connector.connect(
        host="192.168.0.57",           # ‚úÖ Ë´ã‰øÆÊîπÁÇ∫‰Ω†ÁöÑ‰∏ªÊ©üÂêçÁ®±
        user="root",                # ‚úÖ ‰Ω†ÁöÑ MySQL ‰ΩøÁî®ËÄÖÂ∏≥Ëôü
        password="0813",   # ‚úÖ ‰Ω†ÁöÑ MySQL ÂØÜÁ¢º
        database="kana_library",    # ‚úÖ Ë≥áÊñôÂ∫´ÂêçÁ®±
        charset='utf8mb4'
    )

# ‚úÖ LINE BOT ÂàùÂßãÂåñ
line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler      = WebhookHandler(LINE_CHANNEL_SECRET)


@app.route("/")
def home():
    return render_template("index.html")

@app.route("/check", methods=["POST"])
def check_image():
    data = request.json or {}
    image_data = data.get("image")
    answer     = data.get("answer")

    if not image_data or not answer:
        return jsonify({"correct": False, "error": "Missing image or answer"}), 400

    header, encoded = image_data.split(",", 1)
    user_img_path = os.path.join(UPLOAD_FOLDER, "user_input.png")
    with open(user_img_path, "wb") as f:
        f.write(base64.b64decode(encoded))

    correct_img_path = os.path.join(SAMPLE_FOLDER, f"{answer}.png")
    if not os.path.exists(correct_img_path):
        return jsonify({"correct": False, "error": f"Sample {answer}.png not found"}), 404

    try:
        score = compare_images(user_img_path, correct_img_path)
        return jsonify({
            "correct": score > 0.6,
            "score"  : round(score, 3),
            "message": "‚úÖ Correct! Great job!" if score > 0.6 else "‚ùå Try again!"
        })
    except Exception as e:
        return jsonify({"correct": False, "error": str(e)}), 500

def kana_flex(category: str = "Seion") -> dict:
    if category == "Seion":
        rows = [
            "„ÅÇ „ÅÑ „ÅÜ „Åà „Åä", "„Åã „Åç „Åè „Åë „Åì", "„Åï „Åó „Åô „Åõ „Åù",
            "„Åü „Å° „Å§ „Å¶ „Å®", "„Å™ „Å´ „Å¨ „Å≠ „ÅÆ", "„ÅØ „Å≤ „Åµ „Å∏ „Åª",
            "„Åæ „Åø „ÇÄ „ÇÅ „ÇÇ", "„ÇÑ „ÇÜ „Çà", "„Çâ „Çä „Çã „Çå „Çç", "„Çè „Çí „Çì",
        ]
    elif category == "Dakuon":
        rows = [
            "„Åå „Åé „Åê „Åí „Åî", "„Åñ „Åò „Åö „Åú „Åû", "„Å† „Å¢ „Å• „Åß „Å©", "„Å∞ „Å≥ „Å∂ „Åπ „Åº",
        ]
    elif category == "Handakuon":
        rows = [
            "„Å± „Å¥ „Å∑ „Å∫ „ÅΩ",
        ]
    else:
        rows = []

    bubbles = []
    for row in rows:
        bubble = {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "button",
                        "action": {
                            "type": "message",
                            "label": row.strip(),
                            "text": row.strip()
                        },
                        "style": "primary",
                        "height": "sm"
                    }
                ]
            }
        }
        bubbles.append(bubble)

    return {"type": "carousel", "contents": bubbles}

def generate_kana_buttons(row: str) -> dict:
    kana_list = row.strip().split()
    bubbles = []
    for kana in kana_list:
        bubble = {
            "type": "bubble",
            "size": "micro",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "button",
                        "action": {
                            "type": "message",
                            "label": kana,
                            "text": kana
                        },
                        "style": "primary",
                        "height": "sm"
                    }
                ]
            }
        }
        bubbles.append(bubble)
    return {"type": "carousel", "contents": bubbles}

@handler.add(MessageEvent, message=TextMessage)
def handle_msg(event):
    text = event.message.text.strip()

    if text == "Start Practice":
        qr = QuickReply(items=[
            QuickReplyButton(action=URIAction(label="Open Canvas", uri=LIFF_URL)),
            QuickReplyButton(action=MessageAction(label="Kana Table", text="Kana Table")),
            QuickReplyButton(action=MessageAction(label="Help", text="Help")),
        ])
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Choose a function üëá", quick_reply=qr))

    elif text == "Kana Table":
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage("Please choose: Seion / Dakuon / Handakuon", quick_reply=QuickReply(items=[
                QuickReplyButton(action=MessageAction(label="Seion", text="Seion")),
                QuickReplyButton(action=MessageAction(label="Dakuon", text="Dakuon")),
                QuickReplyButton(action=MessageAction(label="Handakuon", text="Handakuon")),
            ])),
        )

    elif text in ("Seion", "Dakuon", "Handakuon"):
        line_bot_api.reply_message(
            event.reply_token,
            FlexSendMessage(alt_text=f"Kana ({text})", contents=kana_flex(text))
        )

    elif text in [
        "„ÅÇ „ÅÑ „ÅÜ „Åà „Åä", "„Åã „Åç „Åè „Åë „Åì", "„Åï „Åó „Åô „Åõ „Åù",
        "„Åü „Å° „Å§ „Å¶ „Å®", "„Å™ „Å´ „Å¨ „Å≠ „ÅÆ", "„ÅØ „Å≤ „Åµ „Å∏ „Åª",
        "„Åæ „Åø „ÇÄ „ÇÅ „ÇÇ", "„ÇÑ „ÇÜ „Çà", "„Çâ „Çä „Çã „Çå „Çç", "„Çè „Çí „Çì",
        "„Åå „Åé „Åê „Åí „Åî", "„Åñ „Åò „Åö „Åú „Åû", "„Å† „Å¢ „Å• „Åß „Å©", "„Å∞ „Å≥ „Å∂ „Åπ „Åº",
        "„Å± „Å¥ „Å∑ „Å∫ „ÅΩ"
    ]:
        line_bot_api.reply_message(
            event.reply_token,
            FlexSendMessage(alt_text="Select a kana", contents=generate_kana_buttons(text))
        )

elif text in [
    "„ÅÇ", "„ÅÑ", "„ÅÜ", "„Åà", "„Åä",
    "„Åã", "„Åç", "„Åè", "„Åë", "„Åì",
    "„Åï", "„Åó", "„Åô", "„Åõ", "„Åù",
    "„Åü", "„Å°", "„Å§", "„Å¶", "„Å®",
    "„Å™", "„Å´", "„Å¨", "„Å≠", "„ÅÆ",
    "„ÅØ", "„Å≤", "„Åµ", "„Å∏", "„Åª",
    "„Åæ", "„Åø", "„ÇÄ", "„ÇÅ", "„ÇÇ",
    "„ÇÑ", "„ÇÜ", "„Çà",
    "„Çâ", "„Çä", "„Çã", "„Çå", "„Çç",
    "„Çè", "„Çí", "„Çì",
    "„Åå", "„Åé", "„Åê", "„Åí", "„Åî",
    "„Åñ", "„Åò", "„Åö", "„Åú", "„Åû",
    "„Å†", "„Å¢", "„Å•", "„Åß", "„Å©",
    "„Å∞", "„Å≥", "„Å∂", "„Åπ", "„Åº",
    "„Å±", "„Å¥", "„Å∑", "„Å∫", "„ÅΩ"
]:
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM kana_items WHERE kana = %s", (text,))
        row = cursor.fetchone()
        conn.close()

        if row:
            flex = {
                "type": "bubble",
                "size": "mega",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"{row['kana']} - Stroke Order",
                            "weight": "bold",
                            "size": "xl",
                            "margin": "md"
                        },
                        {
                            "type": "image",
                            "url": row["image_url"],
                            "size": "full",
                            "aspectMode": "fit",
                            "margin": "md"
                        },
                        {
                            "type": "text",
                            "text": row["stroke_order_text"],
                            "wrap": True,
                            "margin": "md"
                        },
                        {
                            "type": "button",
                            "action": {
                                "type": "uri",
                                "label": "‚ñ∂ ËÅΩÁôºÈü≥",
                                "uri": row["audio_url"]
                            },
                            "style": "primary",
                            "margin": "md"
                        }
                    ]
                }
            }
            line_bot_api.reply_message(
                event.reply_token,
                FlexSendMessage(alt_text=f"{row['kana']} ÁöÑÁ≠ÜÈ†ÜË≥áÊñô", contents=flex)
            )
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage("‚ö†Ô∏è Êâæ‰∏çÂà∞Ë≥áÊñôÔºåË´ãÁ¢∫Ë™çÊòØÂê¶ÊúâËº∏ÂÖ•Ê≠£Á¢∫ÂÅáÂêç„ÄÇ")
            )

    except Exception as e:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(f"‚ùå ÁôºÁîüÈåØË™§Ôºö{str(e)}")
        )


@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers.get("X-Line-Signature", "")
    body      = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return "OK"
