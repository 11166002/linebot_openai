from flask import Flask, request, jsonify
import random
import requests

app = Flask(__name__)

# ========== LINE Token ==========
CHANNEL_ACCESS_TOKEN = "liqx01baPcbWbRF5if7oqBsZyf2+2L0eTOwvbIJ6f2Wec6is4sVd5onjl4fQAmc4n8EuqMfo7prlaG5la6kXb/y1gWOnk8ztwjjx2ZnukQbPJQeDwwcPEdFTOGOmQ1t88bQLvgQVczlzc/S9Q/6y5gdB04t89/1O/w1cDnyilFU="

# ========== üìò Êó•Ë™û‰∫îÂçÅÈü≥Ë≥áÊñôÂçÄÔºàkana_dictÔºâ ==========
kana_dict = {}

# Ê∏ÖÈü≥ÔºàÂü∫Êú¨Èü≥Ôºâ
kana_dict.update({
    "„ÅÇ": "a", "„ÅÑ": "i", "„ÅÜ": "u", "„Åà": "e", "„Åä": "o",
    "„Åã": "ka", "„Åç": "ki", "„Åè": "ku", "„Åë": "ke", "„Åì": "ko",
    "„Åï": "sa", "„Åó": "shi", "„Åô": "su", "„Åõ": "se", "„Åù": "so",
    "„Åü": "ta", "„Å°": "chi", "„Å§": "tsu", "„Å¶": "te", "„Å®": "to",
    "„Å™": "na", "„Å´": "ni", "„Å¨": "nu", "„Å≠": "ne", "„ÅÆ": "no",
    "„ÅØ": "ha", "„Å≤": "hi", "„Åµ": "fu", "„Å∏": "he", "„Åª": "ho",
    "„Åæ": "ma", "„Åø": "mi", "„ÇÄ": "mu", "„ÇÅ": "me", "„ÇÇ": "mo",
    "„ÇÑ": "ya", "„ÇÜ": "yu", "„Çà": "yo",
    "„Çâ": "ra", "„Çä": "ri", "„Çã": "ru", "„Çå": "re", "„Çç": "ro",
    "„Çè": "wa", "„Çí": "wo", "„Çì": "n"
})

# ÊøÅÈü≥ÔºàÊúâÊøÅÈªûÔºâ
kana_dict.update({
    "„Åå": "ga", "„Åé": "gi", "„Åê": "gu", "„Åí": "ge", "„Åî": "go",
    "„Åñ": "za", "„Åò": "ji", "„Åö": "zu", "„Åú": "ze", "„Åû": "zo",
    "„Å†": "da", "„Å¢": "ji", "„Å•": "zu", "„Åß": "de", "„Å©": "do",
    "„Å∞": "ba", "„Å≥": "bi", "„Å∂": "bu", "„Åπ": "be", "„Åº": "bo"
})

# ÂçäÊøÅÈü≥ÔºàÊúâÂçäÊøÅÈªûÔºâ
kana_dict.update({
    "„Å±": "pa", "„Å¥": "pi", "„Å∑": "pu", "„Å∫": "pe", "„ÅΩ": "po"
})

# ÊãóÈü≥ÔºàÊãóÂêàÈü≥ÔºåÂπ≥ÂÅáÂêç + Â∞èÂ≠óÔºâ
kana_dict.update({
    "„Åç„ÇÉ": "kya", "„Åç„ÇÖ": "kyu", "„Åç„Çá": "kyo",
    "„Åó„ÇÉ": "sha", "„Åó„ÇÖ": "shu", "„Åó„Çá": "sho",
    "„Å°„ÇÉ": "cha", "„Å°„ÇÖ": "chu", "„Å°„Çá": "cho",
    "„Å´„ÇÉ": "nya", "„Å´„ÇÖ": "nyu", "„Å´„Çá": "nyo",
    "„Å≤„ÇÉ": "hya", "„Å≤„ÇÖ": "hyu", "„Å≤„Çá": "hyo",
    "„Åø„ÇÉ": "mya", "„Åø„ÇÖ": "myu", "„Åø„Çá": "myo",
    "„Çä„ÇÉ": "rya", "„Çä„ÇÖ": "ryu", "„Çä„Çá": "ryo",
    "„Åé„ÇÉ": "gya", "„Åé„ÇÖ": "gyu", "„Åé„Çá": "gyo",
    "„Åò„ÇÉ": "ja", "„Åò„ÇÖ": "ju", "„Åò„Çá": "jo",
    "„Å≥„ÇÉ": "bya", "„Å≥„ÇÖ": "byu", "„Å≥„Çá": "byo",
    "„Å¥„ÇÉ": "pya", "„Å¥„ÇÖ": "pyu", "„Å¥„Çá": "pyo"
})
# üóÇÔ∏è Google Drive ‰∏äÊØèÂÄãÂÅáÂêçÂ∞çÊáâÁöÑ wav Ê™îÊ°à ID
drive_id_map = {
    "„ÅÇ": "https://drive.google.com/file/d/1qi4Wzop1HRLWE8FjnjlmhWrdqGYf0TK-/view?usp=drive_link",
    "„ÅÑ": "https://drive.google.com/file/d/1eX0J_ldzEauj5grZV3jwIzbwXc7l3IFO/view?usp=drive_link",
    "„ÅÜ": "https://drive.google.com/file/d/1ozopveWMLTMCh6Q_0uihsD3EY8h33Wi2/view?usp=drive_link",
    "„Åà": "https://drive.google.com/file/d/1J_8BTJY286TvlMPDyc00JJjLOcUdO-F8/view?usp=drive_link",
    "„Åä": "https://drive.google.com/file/d/12zRNRLqYCScM3owUtbx_NdaIUWq3nxv8/view?usp=drive_link",
    "„Åã": "https://drive.google.com/file/d/1cpkpwUA3EKUwg3ff5dtUlhIBGQ3Ri_G6/view?usp=drive_link",
    "„Åç": "https://drive.google.com/file/d/150y2HczafC98V8ZFzMRdFTmxr9gBiDEs/view?usp=drive_link",
    "„Åè": "https://drive.google.com/file/d/148R19RHjkGAW1_v5-FUWVbAigPtpTleI/view?usp=drive_link",
    "„Åë": "https://drive.google.com/file/d/12WzgxO4mvRUgOjlKN4rkRw2hFFGIlfkV/view?usp=drive_link",
    "„Åî": "https://drive.google.com/file/d/1EbRiYyIK3FGPWx1qU63onjKTEa-g4fYV/view?usp=drive_link",
    "„Åï": "https://drive.google.com/file/d/1YFO-4r1aFkEbFd5n37P2h27P_gxivlGq/view?usp=drive_link",
    "„Åó": "https://drive.google.com/file/d/1eNMA7xWimCIU-7ZHvNBc-rEdpt2Nbvrs/view?usp=drive_link",
    "„Åô": "https://drive.google.com/file/d/1QcS1Rl5iNzc4sa6uuINDE3XJwjtA5w1N/view?usp=drive_link",
    "„Åõ": "https://drive.google.com/file/d/19-70aawFvx_zdoCy-_T3PwtYic-MAkgb/view?usp=drive_link",
    "„Åù": "https://drive.google.com/file/d/1K6Wau-46t4BtvyJ2JmmcxeYh2QCBkKxN/view?usp=drive_link",
    "„Åü": "https://drive.google.com/file/d/1oD_f1Gi3XgLXM1pzpU9s84-jpyOweDQp/view?usp=drive_link",
    "„Å°": "https://drive.google.com/file/d/152U6CtisRiCnY78A-HF5f-tINb_LYc3l/view?usp=drive_link",
    "„Å§": "https://drive.google.com/file/d/1osc7jbJyXk0pYZjPuf-Cz-jVP7v6xV7x/view?usp=drive_link",
    "„Å¶": "https://drive.google.com/file/d/1XdYElCzgV_LA_hH0yaQ1CadCp922K-Su/view?usp=drive_link",
    "„Å®": "https://drive.google.com/file/d/1YlMWEbKolZmdawNpTtLgvby9-3FSBO2_/view?usp=drive_link",
    "„Å™": "https://drive.google.com/file/d/19LBSd66HIvhuSvSVNfEEONI0cIGL209U/view?usp=drive_link",
    "„Å´": "https://drive.google.com/file/d/1fjtO7SZDFtD8osDyvUX-zP0yEYeds9OF/view?usp=drive_link",
    "„Å¨": "https://drive.google.com/file/d/1LjpZeqqcg_anMEMopzCYvcW5wc8vmge6/view?usp=drive_link",
    "„Å≠": "https://drive.google.com/file/d/1T6Lr5tjUASlWwLFnN54pNOrBpVr3N0vR/view?usp=drive_link",
    "„ÅÆ": "https://drive.google.com/file/d/1mMA0hXj27IXelm6CACEktCr_aGQ8lzAk/view?usp=drive_link",
    "„ÅØ": "https://drive.google.com/file/d/1p6dB2lKBs8MngdYpdk57ZHTuKWyrE0_S/view?usp=drive_link",
    "„Å≤": "https://drive.google.com/file/d/1psHEgqDoNRt9mmh40a2PVR5IikZcK5xj/view?usp=drive_link",
    "„Åµ": "https://drive.google.com/file/d/1pz2VJlPfHDjjHcBc-Ml0OolSD3TEDHi1/view?usp=drive_link",
    "„Å∏": "https://drive.google.com/file/d/13TawhJjTGHaVq8B0GNUki6RLA8gp2yvH/view?usp=drive_link",
    "„Åª": "https://drive.google.com/file/d/1rFVzOgkWSFGAsN2SGohxiAsLfgMkGvE4/view?usp=drive_link",
    "„Åæ": "https://drive.google.com/file/d/1snNBXy5oF0o0Xde-5VANQ6CVo_LRz3m5/view?usp=drive_link",
    "„Åø": "https://drive.google.com/file/d/1QNNSN5HVMjipchSNWcI3lDvIt_8YFGrC/view?usp=drive_link",
    "„ÇÄ": "https://drive.google.com/file/d/1TRporMnQ92xvh4yajTbG6GDV_yVdsc1B/view?usp=drive_link",
    "„ÇÅ": "https://drive.google.com/file/d/132gLQohNFoGLR7AaXRQ8BMdQh-CYu9XE/view?usp=drive_link",
    "„ÇÇ": "https://drive.google.com/file/d/1fksuYLiUdylSCfD6jpRGOJFGfGcxK-IY/view?usp=drive_link",
    "„ÇÑ": "https://drive.google.com/file/d/1fnPI9F4mCrrMC8K6ECpDF_77qUQsI9f9/view?usp=drive_link",
    "„ÇÜ": "https://drive.google.com/file/d/1jGqYQRN5xyLrBxUjV6L19mFhYr4cwB7p/view?usp=drive_link",
    "„Çà": "https://drive.google.com/file/d/107NNSlo6e_ICVZggfELjyM0fWmPIQh1a/view?usp=drive_link",
    "„Çâ": "https://drive.google.com/file/d/1HRAQE2JKLSb65V4iYDEoIREnJRCcyBDa/view?usp=drive_link",
    "„Çä": "https://drive.google.com/file/d/1GkBHQW1qlCBJ-I6A5l7zdGsSU-EDXKGJ/view?usp=drive_link",
    "„Çã": "https://drive.google.com/file/d/12iTRAHlqa7bAstZvd3SIDx8m0UFZTvHn/view?usp=drive_link",
    "„Çå": "https://drive.google.com/file/d/1m9vGxYBBRFIUXFuhifubjcP1LRPgRcgD/view?usp=drive_link",
    "„Çç": "https://drive.google.com/file/d/1708ZKi4NuJ5FqEbvPSOO0NGtaKwqNi4b/view?usp=drive_link",
    "„Çè": "https://drive.google.com/file/d/1bHCK_-Dy4jgSPubuKY0bELQFRL4o0BtP/view?usp=drive_link",
    "„Çí": "https://drive.google.com/file/d/1obNR12X5MJ_oeYZJ22wKcyLS649k_BiY/view?usp=drive_link",
    "„Çì": "https://drive.google.com/file/d/1uIye20OkRPZa1ORTTOTlLt8l-mo2oeQt/view?usp=drive_link",
    "„Åå": "https://drive.google.com/file/d/1SqwccSBNanU4wM1WCWBHC2fCPRO2BeKj/view?usp=drive_link",
    "„Åé": "https://drive.google.com/file/d/1ZLmV8Cp9DCsW2mwSpafud8SxemOl3dGI/view?usp=drive_link",
    "„Åê": "https://drive.google.com/file/d/1galHzibMoBD_1-7lol-X3v6RdgItV7va/view?usp=drive_link",
    "„Åí": "https://drive.google.com/file/d/1P6gWAveVjvQYXlqP6zkX3VigLlWtBaus/view?usp=drive_link",
    "„Åî": "https://drive.google.com/file/d/1AwsBODN-b3ohQTa5IXlcz7m6LuZCr7bG/view?usp=drive_link",
    "„Åñ": "https://drive.google.com/file/d/13AbnN93UNaYo2p-VgjTPXFOcCXxkTxWv/view?usp=drive_link",
    "„Åò": "https://drive.google.com/file/d/1Uy8l3McuZzO1S9VHz-J74xvOnWRe0wFa/view?usp=drive_link",
    "„Åö": "https://drive.google.com/file/d/1P_FvoO29rCNFUVNRuhnvGpPmRIsG6HG1/view?usp=drive_link",
    "„Åú": "https://drive.google.com/file/d/1QflPrMIsDAJ4zMBaitjxuSWZy8Fux3rx/view?usp=drive_link",
    "„Åû": "https://drive.google.com/file/d/1Ke7vqUC9wrOgbeHQZnRe0KuI60mTOTEw/view?usp=drive_link",
    "„Å†": "https://drive.google.com/file/d/15ob36UFyftU-ezXoBDqBnAFR-TcZJAdJ/view?usp=drive_link",
    "„Å¢": "https://drive.google.com/file/d/1_BXLlwznWPPGyv8RBPjEV8EWHLLoxCLv/view?usp=drive_link",
    "„Å•": "https://drive.google.com/file/d/1E78D2C-c2RofmvLRJ_cVANyiFdzwg9cI/view?usp=drive_link",
    "„Åß": "https://drive.google.com/file/d/1Ej9-VvnuJbWaq4JLOiSrbOHKvFsoIXy_/view?usp=drive_link",
    "„Å©": "https://drive.google.com/file/d/19PeLfmuH7qL6_GuMsu0CQMs60ZO7LIPp/view?usp=drive_link",
    "„Å∞": "https://drive.google.com/file/d/1eJFvDdvF2i13kY5W1e8KGfUJuPV8ECM5/view?usp=drive_link",
    "„Å≥": "https://drive.google.com/file/d/1_gA_KSuCYuHqtuA3OYWjJNN4rEagmHO8/view?usp=drive_link",
    "„Å∂": "https://drive.google.com/file/d/175HFQBnnM796yVpxppc1msYxf7OrLPz4/view?usp=drive_link",
    "„Åπ": "https://drive.google.com/file/d/1beQ9FQSBAz8BNRi0AF1f5KQ7kJCmJ46N/view?usp=drive_link",
    "„Åº": "https://drive.google.com/file/d/1iUa3-ZGIAK6N6gl3IBP_ytcDYyIAJMXj/view?usp=drive_link",
    "„Å±": "https://drive.google.com/file/d/1r9MXpT9dATwF92d3Ro2Go0lXnZoQdbmy/view?usp=drive_link",
    "„Å¥": "https://drive.google.com/file/d/1gWa_ViuSQdt-I54YlvtCddKG5YCFecp5/view?usp=drive_link",
    "„Å∑": "https://drive.google.com/file/d/1gyN7Q4R6HOg47wiQC03yAvMH-UZVXv5E/view?usp=drive_link",
    "„Å∫": "https://drive.google.com/file/d/1UyJ4lY9ksuxvjWPGeCthoCz0BqMyJMDz/view?usp=drive_link",
    "„ÅΩ": "https://drive.google.com/file/d/1ptJwP7vQoRaKGfYPOgat4jvvD70GvRYA/view?usp=drive_link",
    "„Åç„ÇÉ": "https://drive.google.com/file/d/1e57n2CV5fCkKc34ONvbEd1M2brrjhwmU/view?usp=drive_link",
    "„Åç„ÇÖ": "https://drive.google.com/file/d/1MRRkxD5zHQs9F9oVhrHqtzUihOLSf9oY/view?usp=drive_link",
    "„Åç„Çá": "https://drive.google.com/file/d/17bi-xQpVDdXREOowhEV6MNtoxIR_GGZe/view?usp=drive_link",
    "„Åó„ÇÉ": "https://drive.google.com/file/d/1i0IBUfjfwlSEUv1RQKckfL194duLrXWt/view?usp=drive_link",
    "„Åó„ÇÖ": "https://drive.google.com/file/d/1NgKQbeeKKlHgVgzE01pVQPYchj2qAmZC/view?usp=drive_link",
    "„Åó„Çá": "https://drive.google.com/file/d/1hEcVh2lQ03dEl5ATPrkKPfsfSXwz9xf2/view?usp=drive_link",
    "„Å°„ÇÉ": "https://drive.google.com/file/d/1ZwfAypRnMdTVyc_3qNeYWZb-VhWfyxdP/view?usp=drive_link",
    "„Å°„ÇÖ": "https://drive.google.com/file/d/1dMMdnyrgzEiWN-5i9CTg1ljgyeZ5Km9g/view?usp=drive_link",
    "„Å°„Çá": "https://drive.google.com/file/d/1kBQEngw3OmSuo9MzKc2TlaKGNw6mOWBk/view?usp=drive_link",
    "„Å´„ÇÉ": "https://drive.google.com/file/d/1gPeJTMKvLwkxNtWWRKp_QxuI1fWW04nO/view?usp=drive_link",
    "„Å´„ÇÖ": "https://drive.google.com/file/d/1Dgy_P4ymNhTFJp_72VcdZNPHXvWYGTLR/view?usp=drive_link",
    "„Å´„Çá": "https://drive.google.com/file/d/1JgA1TjMsfJGC6hql0IXIthvWV1hUBdAU/view?usp=drive_link",
    "„Å≤„ÇÉ": "https://drive.google.com/file/d/1WqtE3CKpxt8C1UwHyamSMrqAd-PSZ2--/view?usp=drive_link",
    "„Å≤„ÇÖ": "https://drive.google.com/file/d/1ozTIBG3KrWuzE0h9zNhbd2_Da40VRyl3/view?usp=drive_link",
    "„Å≤„Çá": "https://drive.google.com/file/d/1yeaXAZeP_Z-CGBbxiEwDKeIKS0CopXWZ/view?usp=drive_link",
    "„Åø„ÇÉ": "https://drive.google.com/file/d/1wftleVz4Ix7hMpf-P5lqH9gKa_TI3m1M/view?usp=drive_link",
    "„Åø„ÇÖ": "https://drive.google.com/file/d/1jvUAZ-SZPrRgghFT1E8DbWvovq_5wPFX/view?usp=drive_link",
    "„Åø„Çá": "https://drive.google.com/file/d/1o9GxhW5PY7O9S7gv9pRPBkkrl0h_LqGB/view?usp=drive_link",
    "„Çä„ÇÉ": "https://drive.google.com/file/d/1Vsg5bkwHO5cwYQYmNqKmUnkJ4O21e1ic/view?usp=drive_link",
    "„Çä„ÇÖ": "https://drive.google.com/file/d/1NAfzk-UNCfFK9HP-8Mh1vZCr3-JJYjeA/view?usp=drive_link",
    "„Çä„Çá": "https://drive.google.com/file/d/1cNDGNPWTb-sKof9gZ8_uCUOA_ACJWH9e/view?usp=drive_link",
    "„Åé„ÇÉ": "https://drive.google.com/file/d/1fQfxlHNv99sLWe766Ce7zU5S1U0DHbcQ/view?usp=drive_link",
    "„Åé„ÇÖ": "https://drive.google.com/file/d/1y3rTFVQ9mOoDy4JNjeBnepGzbbhkpMmE/view?usp=drive_link",
    "„Åé„Çá": "https://drive.google.com/file/d/1hq45WmBWVHBZRuit6wYdgWqnex03FCEe/view?usp=drive_link",
    "„Åò„ÇÉ": "https://drive.google.com/file/d/1ov7ewK6oZe0Z81USn7yPm7B7JqZJd5Zs/view?usp=drive_link",
    "„Åò„ÇÖ": "https://drive.google.com/file/d/16WXjWe020dDBocrb_k5oXOTQxhaxU9Za/view?usp=drive_link",
    "„Åò„Çá": "https://drive.google.com/file/d/1vgrPLWRUnZBG8qFxBDe8reBbktitthXA/view?usp=drive_link",
    "„Å≥„ÇÉ": "https://drive.google.com/file/d/1Ch2fIayAchl4PfNdIPzsQwHaWf-i1dUh/view?usp=drive_link",
    "„Å≥„ÇÖ": "https://drive.google.com/file/d/1UDod8vJ6ae2-Fgje0T8b44SXJqCwUmX8/view?usp=drive_link",
    "„Å≥„Çá": "https://drive.google.com/file/d/1VCbp8goKIHCafK6gCNigg1279fEff5W0/view?usp=drive_link",    
    "„Å¥„ÇÉ": "https://drive.google.com/file/d/14g-BBfkzrwl44GG7VGrVvKw9spyMjqyr/view?usp=drive_link",
    "„Å¥„ÇÖ": "https://drive.google.com/file/d/1FWC5qSuuMm6krNtk9YpjpNH8priBMmgQ/view?usp=drive_link",
    # ‚Ä¶ ÂÖ∂‰ªñÂÅáÂêç‰æùÂ∫èÂ°´‰∏ä
}
# ========== üß© Ëø∑ÂÆÆÈÅäÊà≤Ë®≠ÂÆöÔºàËø∑ÂÆÆÂú∞ÂúñÁîüÊàê„ÄÅÈô∑Èò±ËàáÈ°åÁõÆÔºâ ==========
maze_size = 7
maze = [["‚¨ú" for _ in range(maze_size)] for _ in range(maze_size)]
for i in range(maze_size):
    maze[0][i] = maze[maze_size-1][i] = "‚¨õ"
    maze[i][0] = maze[i][maze_size-1] = "‚¨õ"

# Âõ∫ÂÆöËø∑ÂÆÆÂú∞ÂúñÔºà‰∏çÂÜçÈö®Ê©üÁî¢ÁîüÁâÜÂ£ÅÔºâ
start = (1, 1)
goal = (maze_size - 2, maze_size - 2)
maze[goal[0]][goal[1]] = "‚õ©"

# Ë™øÊï¥Âõ∫ÂÆöÁâÜÂ£ÅÔºàÊîπÁÇ∫ÈÄöÈÅì‰ª•Á¢∫‰øùÊúâÈÄöË∑ØÔºâ
maze[1][3] = "‚¨ú"
maze[2][2] = "‚¨ú"
maze[3][1] = "‚¨ú"
maze[4][3] = "‚¨ú"
maze[5][2] = "‚¨ú"

start = (1,1)
goal = (maze_size-2, maze_size-2)
maze[goal[0]][goal[1]] = "‚õ©"
players = {}
quiz_positions = [(random.randint(1, maze_size-2), random.randint(1, maze_size-2)) for _ in range(5)]

# üèπ Â∞ÑÈ£õÈè¢ÈÅäÊà≤Ë≥áÊñô (Âê´ÁπÅÈ´î‰∏≠ÊñáÊÑèÁæ©)
dart_words = {
    "„Åø„Åö": ("mizu", "Ê∞¥"),
    "„Åü„Åπ„Çã": ("taberu", "ÂêÉ"),
    "„ÅÆ„ÇÄ": ("nomu", "Âñù"),
    "„ÅÑ„Åè": ("iku", "Âéª"),
    "„Åè„Çã„Åæ": ("kuruma", "Ëªä"),
    "„Å®„ÇÇ„Å†„Å°": ("tomodachi", "ÊúãÂèã"),
    "„Åõ„Çì„Åõ„ÅÑ": ("sensei", "ËÄÅÂ∏´"),
    "„Åª„Çì": ("hon", "Êõ∏"),
    "„ÅÑ„Å¨": ("inu", "Áãó"),
    "„Å≠„Åì": ("neko", "Ë≤ì")
}
dart_sessions = {}

@app.route("/callback", methods=["POST"])
def callback():
    body = request.get_json()
    events = body.get("events", [])

    for event in events:
        if event["type"] == "message":
            reply_token = event["replyToken"]
            user_id = event["source"]["userId"]
            text = event["message"]["text"].strip()

            if text == "‰∏ªÈÅ∏ÂñÆ":
                menu = (
                    "Ë´ãÈÅ∏ÊìáÔºö\n"
                    "1. ÊàëË¶ÅÁúã‰∫îÂçÅÈü≥\n"
                    "2. ÊàëË¶ÅÁé©Ëø∑ÂÆÆÈÅäÊà≤\n"
                    "3. ÊàëË¶ÅÁé©Ë≥ΩËªäÈÅäÊà≤\n"
                    "4. ÊàëË¶ÅÁé©Â∞ÑÈ£õÈè¢ ÈÄ≤ÈöéÁØá\n"
                    "5. ÊàëË¶ÅÂ°´ÂïèÂç∑ÔΩû\n\n"
                    "„ÄêÈÅäÊà≤Ë¶èÂâá„Äë\n"
                    "üìò Áúã‰∫îÂçÅÈü≥ÔºöÊü•ÁúãÊâÄÊúâÂπ≥ÂÅáÂêç„ÄÅÁâáÂÅáÂêçËàáÁæÖÈ¶¨ÊãºÈü≥Â∞çÁÖß„ÄÇ\n"
                    "üß© Ëø∑ÂÆÆÈÅäÊà≤Ôºö‰ΩøÁî®„Äé‰∏ä/‰∏ã/Â∑¶/Âè≥„ÄèÁßªÂãïËßíËâ≤ÔºåÈÅáÂà∞ÂÅáÂêçÈÅ∏ÊìáÈ°åÊôÇÁ≠îÂ∞çÊâçËÉΩÁπºÁ∫å„ÄÇ\n"
                    "üèé Ë≥ΩËªäÈÅäÊà≤ÔºöÊØèÊ¨°Ëº∏ÂÖ•„ÄéÂâçÈÄ≤„ÄèÊúÉÊé®ÈÄ≤‰∏ÄÊ†ºÔºåÊäµÈÅîÁµÇÈªûÂç≥ÂãùÂà©ÔºÅ\n"
                    "üéØ Â∞ÑÈ£õÈè¢ÈÅäÊà≤ÔºöÈö®Ê©üÂ∞Ñ‰∏≠‰∏ÄÂÄãÊó•ÊñáÂñÆÂ≠óÔºàÂê´‰∏≠ÊñáÊÑèÁæ©ÔºâÔºåË´ãÈÅ∏Âá∫Ê≠£Á¢∫ÁöÑÁæÖÈ¶¨ÊãºÈü≥ÔºåÁ≠îÂ∞çÂç≥ÂëΩ‰∏≠ÔºÅ"
                )
                reply_text(reply_token, menu)

            elif text == "1" or text == "ÊàëË¶ÅÁúã‰∫îÂçÅÈü≥":
                reply_text(reply_token, get_kana_table())

            elif text == "2" or text == "ÊàëË¶ÅÁé©Ëø∑ÂÆÆÈÅäÊà≤":
                players[user_id] = {"pos": (1, 1), "quiz": None, "game": "maze", "score": 0}
                reply_text(reply_token, render_map((1, 1)) + "\nüåü Ëø∑ÂÆÆÈÅäÊà≤ÈñãÂßãÔºÅË´ãËº∏ÂÖ•„Äå‰∏ä„Äç„Äå‰∏ã„Äç„ÄåÂ∑¶„Äç„ÄåÂè≥„ÄçÁßªÂãï„ÄÇ")

            elif text == "3" or text == "ÊàëË¶ÅÁé©Ë≥ΩËªäÈÅäÊà≤":
                players[user_id] = {"car_pos": 0, "game": "race", "quiz": None, "last_quiz": None, "last_msg": None}
                reply_text(reply_token, render_race(0) + "\nüèÅ Ë≥ΩËªäÈÅäÊà≤ÈñãÂßãÔºÅË´ãËº∏ÂÖ•„ÄåÂâçÈÄ≤„Äç‰æÜÊé®ÈÄ≤‰Ω†ÁöÑËªäÂ≠ê„ÄÇ")

            elif text == "4" or text == "ÊàëË¶ÅÁé©Â∞ÑÈ£õÈè¢":
                # --- ÂÖàÈö®Ê©üÈÅ∏ÂñÆÂ≠ó‰∏¶Áî¢ÁîüÈÅ∏È†Ö„ÄÅË®òÈåÑ session ---
                word, (romaji, meaning) = random.choice(list(dart_words.items()))
                options = [romaji]
                while len(options) < 3:
                    distractor = random.choice([v[0] for v in dart_words.values()])
                    if distractor not in options:
                        options.append(distractor)
                random.shuffle(options)
                choice_map = {"A": options[0], "B": options[1], "C": options[2]}
                dart_sessions[user_id] = {
                    "word": word,
                    "meaning": meaning,
                    "answer": romaji,
                    "choice_map": choice_map
                }
                choices_text = "\n".join([f"{k}. {v}" for k, v in choice_map.items()])

                # --- ‰∏ÄÊ¨°ÂõûË¶Ü‰∏âÂâáË®äÊÅØÔºöÂúñÁâá„ÄÅÊÉÖÂ¢É„ÄÅÈÅäÊà≤È°åÁõÆ ---
                headers = {
                    "Authorization": f"Bearer {CHANNEL_ACCESS_TOKEN}",
                    "Content-Type": "application/json"
                }
                body = {
                    "replyToken": reply_token,
                    "messages": [
                        {
                            "type": "image",
                            "originalContentUrl": "https://i.imgur.com/5F3fhhn.png",
                            "previewImageUrl":  "https://i.imgur.com/5F3fhhn.png"
                        },
                        {
                            "type": "text",
                            "text": (
                                "üéØ ÊÉÖÂ¢ÉÈ°åÔºö‰Ω†‰æÜÂà∞ÁÜ±È¨ßÁöÑÊó•ÂºèÁ•≠ÂÖ∏Â∞ÑÈ£õÈè¢Êî§‰ΩçÔºå"
                                "ÁúºÂâçÁöÑÈù∂Â≠ê‰∏äÂç∞ÊúâÊó•Ë™ûÂñÆÂ≠óËàáÂÖ∂‰∏≠ÊñáÊÑèÁæ©Ôºå"
                                "Ë´ãÂ∞Ñ‰∏≠‰∏ÄÂÄãÂñÆÂ≠óÂæåÔºåÈÅ∏Âá∫ÂÖ∂Ê≠£Á¢∫ÁöÑÁæÖÈ¶¨ÊãºÈü≥ÔºÅ"
                            )
                        },
                        {
                            "type": "text",
                            "text": (
                                f"üéØ Â∞ÑÈ£õÈè¢ÁµêÊûúÔºö‰Ω†Â∞Ñ‰∏≠‰∫Ü„Äå{word}Ôºà{meaning}Ôºâ„ÄçÔºÅ\n"
                                f"Ë´ãÈÅ∏Âá∫Ê≠£Á¢∫ÁöÑÁæÖÈ¶¨ÊãºÈü≥Ôºö\n{choices_text}"
                            )
                        }
                    ]
                }
                requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=body)
                # Â∞ÑÈ£õÈè¢ÈÅäÊà≤ÈñãÂßã
                word, (romaji, meaning) = random.choice(list(dart_words.items()))
                options = [romaji]
                while len(options) < 3:
                    distractor = random.choice([v[0] for v in dart_words.values()])
                    if distractor not in options:
                        options.append(distractor)
                random.shuffle(options)
                dart_sessions[user_id] = {"word": word, "meaning": meaning, "answer": romaji, "options": options}
                choice_map = {"A": options[0], "B": options[1], "C": options[2]}
                dart_sessions[user_id]["choice_map"] = choice_map
                choices_text = "\n".join([f"{k}. {v}" for k, v in choice_map.items()])
                reply_text(
                    reply_token,
                    f"üéØ Â∞ÑÈ£õÈè¢ÁµêÊûúÔºö‰Ω†Â∞Ñ‰∏≠‰∫Ü„Äå{word}Ôºà{meaning}Ôºâ„ÄçÔºÅ\n"
                    f"Ë´ãÈÅ∏Âá∫Ê≠£Á¢∫ÁöÑÁæÖÈ¶¨ÊãºÈü≥Ôºö\n{choices_text}"
                )

            elif user_id in dart_sessions and text in ["A", "B", "C"]:
                # ËôïÁêÜÂ∞ÑÈ£õÈè¢Á≠îÊ°à
                session = dart_sessions[user_id]
                if session["choice_map"][text] == session["answer"]:
                    del dart_sessions[user_id]
                    reply_text(reply_token, "üéØ ÂëΩ‰∏≠ÔºÅÁ≠îÂ∞ç‰∫ÜÔºÅ")
                else:
                    choices_text = "\n".join([f"{k}. {v}" for k, v in session["choice_map"].items()])
                    reply_text(
                        reply_token,
                        f"‚ùå Ê≤íÂ∞Ñ‰∏≠ÔºåÂÜçË©¶‰∏ÄÊ¨°ÔºÅË´ãÈÅ∏Âá∫„Äå{session['word']}Ôºà{session['meaning']}Ôºâ„ÄçÁöÑÊ≠£Á¢∫ÁæÖÈ¶¨ÊãºÈü≥Ôºö\n{choices_text}"
                    )

            elif text == "5" or text == "ÊàëË¶ÅÂ°´ÂïèÂç∑ÔΩû":
                reply_text(reply_token, "üìã Ë´ãÈªûÈÅ∏‰ª•‰∏ãÈÄ£ÁµêÂ°´ÂØ´ÂïèÂç∑Ôºö\nhttps://forms.gle/w5GNDJ7PY9uWTpsG6")
            elif user_id in players and players[user_id].get("game") == "maze" and text in ["‰∏ä","‰∏ã","Â∑¶","Âè≥"]:
                result = maze_game(user_id, text)
                if result.get("audio"):
                    headers = {
                        "Authorization": f"Bearer {CHANNEL_ACCESS_TOKEN}",
                        "Content-Type":    "application/json"
                    }
                    body = {
                        "replyToken": reply_token,
                        "messages": [
                            {
                                "type":               "audio",
                                "originalContentUrl": result["audio"],
                                "duration":           1500
                            },
                            {
                                "type": "text",
                                "text": result["map"] + "\nüí¨ " + result["message"]
                            }
                        ]
                    }
                    requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=body)
                else:
                    reply_text(reply_token, result["map"] + "\nüí¨ " + result["message"])


            elif user_id in players and players[user_id].get("game") == "maze" and players[user_id].get("quiz"):
                result = maze_game(user_id, text)
                reply_text(reply_token, result["map"] + "\nüí¨ " + result["message"])

            elif user_id in players and players[user_id].get("game") == "race" and text in ["A", "B", "C", "D"]:
                result = race_answer(user_id, text)
                reply_text(reply_token, result)

            elif user_id in players and players[user_id].get("game") == "race" and text == "ÂâçÈÄ≤":
                result = race_game(user_id)
                reply_text(reply_token, result)

            else:
                reply_text(reply_token,
                    "üì¢ Ë´ãËº∏ÂÖ•„Äé‰∏ªÈÅ∏ÂñÆ„Äè")


def reply_text(reply_token, text):
    headers = {
        "Authorization": f"Bearer {CHANNEL_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    body = {
        "replyToken": reply_token,
        "messages": [{"type": "text", "text": text}]
    }
    requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=body)

# üß© Ëø∑ÂÆÆÈÅäÊà≤ÈÇèËºØ
def maze_game(user, message):
    player = players.setdefault(user, {"pos": start, "quiz": None, "game": "maze", "score": 0})
    if player.get("quiz"):
        kana, answer, choice_map = player["quiz"]
        if message in choice_map and choice_map[message] == answer:
            player["quiz"] = None
            return {"map": render_map(player["pos"]), "message": "‚úÖ ÂõûÁ≠îÊ≠£Á¢∫ÔºåÁπºÁ∫åÂâçÈÄ≤ÔºÅ"}
        else:
            options_text = "\n".join([f"{key}. {val}" for key, val in choice_map.items()])
            return {"map": render_map(player["pos"]), "message": f"‚ùå ÂõûÁ≠îÈåØË™§ÔºåË´ãÂÜçË©¶‰∏ÄÊ¨°Ôºö\n{options_text}"}
    direction = {"‰∏ä": (-1, 0), "‰∏ã": (1, 0), "Â∑¶": (0, -1), "Âè≥": (0, 1)}
    if message not in direction:
        return {"map": render_map(player["pos"]), "message": "Ë´ãËº∏ÂÖ•ÊñπÂêëÔºö‰∏ä„ÄÅ‰∏ã„ÄÅÂ∑¶„ÄÅÂè≥"}
    dy, dx = direction[message]
    y, x = player["pos"]
    new_pos = (y + dy, x + dx)
    if not (0 <= new_pos[0] < maze_size and 0 <= new_pos[1] < maze_size) or maze[new_pos[0]][new_pos[1]] == "‚¨õ":
        return {"map": render_map(player["pos"]), "message": "üöß ÂâçÊñπÊòØÁâÜÔºå‰∏çËÉΩËµ∞ÂñîÔºÅ"}
    player["pos"] = new_pos
    if new_pos == (2, 5):
        player["pos"] = goal
        return {"map": render_map(goal), "message": "üéÅ Âπ∏ÈÅãÔºÅ‰Ω†Êê≠‰∏äÁû¨ÁßªÂÇ≥ÈÄÅÈñÄÔºåÁõ¥ÈÅîÁµÇÈªûÔºÅ"}
    if new_pos == goal:
        players.pop(user)
        return {"map": render_map(new_pos), "message": "üéâ ÊÅ≠Âñú‰Ω†Âà∞ÈÅîÁµÇÈªûÔºÅÈÅäÊà≤ÂÆåÊàêÔºÅËº∏ÂÖ• '‰∏ªÈÅ∏ÂñÆ' ÈáçÊñ∞ÈñãÂßã"}
    if new_pos in quiz_positions or random.random() < 0.5:
    kana, correct = random.choice(list(kana_dict.items()))
    ‚Ä¶  # Áî¢Áîü choice_mapÔºàÂêåÂéüÊú¨Ôºâ
    options_text = "\n".join([f"{k}. {v}" for k, v in choice_map.items()])

    # ‚Üê Âä†ÈÄôÂÖ©Ë°åÔºöËá™ÂãïÁµÑÂá∫‰∏ãËºâÁõ¥Èèà
    file_id   = drive_id_map.get(kana)
    audio_url = f"https://drive.google.com/uc?export=download&id={file_id}"

    return {
        "map":    render_map(new_pos),
        "message": f"‚ùì ÊåëÊà∞Ôºö„Äå{kana}„ÄçÁöÑÁæÖÈ¶¨ÊãºÈü≥ÊòØÔºü\n{options_text}",
        "audio":  audio_url
    }
    return {"map": render_map(new_pos), "message": f"‰Ω†ÁßªÂãï‰∫ÜÔºåÂèØ‰ª•ÁπºÁ∫åÂâçÈÄ≤ÔºàÂæóÂàÜ {player.get('score', 0)} ÂàÜÔºâ"}
    # üß© Ëø∑ÂÆÆÈÅäÊà≤ÈÇèËºØ

def maze_game(user, message):
    player = players.setdefault(user, {"pos": start, "quiz": None, "game": "maze", "score": 0})

    # Â¶ÇÊûúÊúâÂæÖÂõûÁ≠îÁöÑÈ°åÁõÆÔºåÂ∞±ËôïÁêÜÁ≠îÊ°àÔºàÁ≠îÊ°àÊáâÁÇ∫ A, B, C ÂΩ¢ÂºèÔºâ
    if player.get("quiz"):
        kana, answer, choice_map = player["quiz"]
        if message in choice_map and choice_map[message] == answer:
            player["quiz"] = None
            return {"map": render_map(player["pos"]), "message": "‚úÖ ÂõûÁ≠îÊ≠£Á¢∫ÔºåÁπºÁ∫åÂâçÈÄ≤ÔºÅ"}
        else:
            options_text = "\n".join([f"{key}. {val}" for key, val in choice_map.items()])
            return {"map": render_map(player["pos"]), "message": f"‚ùå ÂõûÁ≠îÈåØË™§ÔºåË´ãÂÜçË©¶‰∏ÄÊ¨°Ôºö\n{options_text}"}

    # Âê¶ÂâáËôïÁêÜÁßªÂãï
    direction = {"‰∏ä": (-1, 0), "‰∏ã": (1, 0), "Â∑¶": (0, -1), "Âè≥": (0, 1)}
    if message not in direction:
        return {"map": render_map(player["pos"]), "message": "Ë´ãËº∏ÂÖ•ÊñπÂêëÔºö‰∏ä„ÄÅ‰∏ã„ÄÅÂ∑¶„ÄÅÂè≥"}
        
    dy, dx = direction[message]
    y, x = player["pos"]
    new_pos = (y + dy, x + dx)

    if not (0 <= new_pos[0] < maze_size and 0 <= new_pos[1] < maze_size) or maze[new_pos[0]][new_pos[1]] == "‚¨õ":
        return {"map": render_map(player["pos"]), "message": "üöß ÂâçÊñπÊòØÁâÜÔºå‰∏çËÉΩËµ∞ÂñîÔºÅ"}

    player["pos"] = new_pos

    # Ëã•Âà∞ÁâπÂÆöÊ†ºÂ≠êÔºà‰æãÔºö(2,5)ÔºâÂâáÁû¨ÁßªËá≥ÁµÇÈªû
    if new_pos == (2, 5):
        player["pos"] = goal
        return {"map": render_map(goal), "message": "üéÅ Âπ∏ÈÅãÔºÅ‰Ω†Êê≠‰∏äÁû¨ÁßªÂÇ≥ÈÄÅÈñÄÔºåÁõ¥ÈÅîÁµÇÈªûÔºÅ"}

    if new_pos == goal:
        players.pop(user)
        return {"map": render_map(new_pos), "message": "üéâ ÊÅ≠Âñú‰Ω†Âà∞ÈÅîÁµÇÈªûÔºÅÈÅäÊà≤ÂÆåÊàêÔºÅËº∏ÂÖ• '‰∏ªÈÅ∏ÂñÆ' ÈáçÊñ∞ÈñãÂßã"}

    # Âá∫È°åÔºöËã•ÁßªÂãïÂà∞È°åÁõÆÊ†º Êàñ Èö®Ê©üËß∏ÁôºÈ°åÁõÆ
    if new_pos in quiz_positions or random.random() < 0.5:
        kana, correct = random.choice(list(kana_dict.items()))
        options = [correct]
        while len(options) < 3:
            distractor = random.choice(list(kana_dict.values()))
            if distractor not in options:
                options.append(distractor)
        random.shuffle(options)
        choice_map = {"A": options[0], "B": options[1], "C": options[2]}
        player["quiz"] = (kana, correct, choice_map)
        player["score"] = player.get("score", 0) + 1
        options_text = "\n".join([f"{key}. {val}" for key, val in choice_map.items()])
        return {"map": render_map(new_pos), "message": f"‚ùì ÊåëÊà∞Ôºö„Äå{kana}„ÄçÁöÑÁæÖÈ¶¨ÊãºÈü≥ÊòØÔºü\nË´ãÂæû‰∏ãÂàóÈÅ∏È†ÖÈªûÈÅ∏Ôºö\n{options_text}"}
        
    return {"map": render_map(new_pos), "message": f"‰Ω†ÁßªÂãï‰∫ÜÔºåÂèØ‰ª•ÁπºÁ∫åÂâçÈÄ≤ÔºàÂæóÂàÜ {player.get('score', 0)} ÂàÜÔºâ"}


# üß© È°ØÁ§∫Ëø∑ÂÆÆÂú∞Âúñ

def render_map(player_pos):
    result = ""
    for y in range(maze_size):
        for x in range(maze_size):
            if (y, x) == player_pos:
                result += "üòä"
            elif (y, x) == goal:
                result += "‚õ©"
            else:
                result += maze[y][x]
        result += "\n"
    return result.strip()

# Êñ∞Â¢û‰∏ÄÂÄãË≥ΩËªäÈÅäÊà≤ÁöÑÂõûÁ≠îËôïÁêÜÂáΩÂºè
def race_answer(user, answer):
    player = players.get(user)
    if not player or not player.get("last_quiz"):
        return "Ê≤íÊúâÂæÖÂõûÁ≠îÁöÑÈ°åÁõÆÔºåË´ãËº∏ÂÖ•„ÄéÂâçÈÄ≤„Äè‰ª•Áç≤ÂæóÊñ∞È°åÁõÆ„ÄÇ"
    kana, correct, choice_map = player["last_quiz"]
    if answer in choice_map and choice_map[answer] == correct:
        player["car_pos"] += 1
        # Ê∏ÖÈô§ quiz Âíå last_quizÔºå‰ΩøÊØèÊ¨°„ÄåÂâçÈÄ≤„ÄçÊúÉÁî¢ÁîüÊñ∞È°åÁõÆ
        player["quiz"] = None
        player["last_quiz"] = None
        return render_race(player["car_pos"]) + "\n‚úÖ ÂõûÁ≠îÊ≠£Á¢∫ÔºåË´ãËº∏ÂÖ•„ÄéÂâçÈÄ≤„Äè‰ª•Áç≤ÂæóÊñ∞È°åÁõÆÔºÅ"
    else:
        return render_race(player["car_pos"], kana, choice_map) + "\n‚ùå ÂõûÁ≠îÈåØË™§ÔºåË´ãÂÜçË©¶‰∏ÄÊ¨°ÔºÅ"
# üèé Ë≥ΩËªäÈÅäÊà≤Áï´Èù¢È°ØÁ§∫

def render_race(pos, kana=None, options=None):
    track = ["‚¨ú" for _ in range(10)]
    if pos >= len(track):
        return "üèÅ ‰Ω†Ë¥è‰∫ÜÔºÅË≥ΩËªäÊäµÈÅîÁµÇÈªûÔºÅ\nËº∏ÂÖ• '‰∏ªÈÅ∏ÂñÆ' ÈáçÊñ∞ÈñãÂßã"
    track[pos] = "üèé"
    race_line = "üöó Ë≥ΩËªäÈÄ≤Â∫¶Ôºö\n" + ''.join(track)
    if kana and options:
        options_text = "\n".join([f"{key}. {val}" for key, val in options.items()])
        return f"{race_line}\n\n‚ùì Ë´ãÂïè„Äå{kana}„ÄçÁöÑÁæÖÈ¶¨ÊãºÈü≥ÊòØÔºü\n{options_text}\nË´ãÊåâÊåâÈàï‰ΩúÁ≠îÔºàA/B/CÔºâ„ÄÇ"
    return race_line

# üèé Ë≥ΩËªäÈÅäÊà≤ÂõûÁ≠îËôïÁêÜ
def race_answer(user, answer):
    player = players.get(user)
    if not player or not player.get("last_quiz"):
        return "Ê≤íÊúâÂæÖÂõûÁ≠îÁöÑÈ°åÁõÆÔºåË´ãËº∏ÂÖ•„ÄéÂâçÈÄ≤„Äè‰ª•Áç≤ÂæóÊñ∞È°åÁõÆ„ÄÇ"
    kana, correct, choice_map = player["last_quiz"]
    if answer in choice_map and choice_map[answer] == correct:
        player["car_pos"] += 1
        player["quiz"] = None
        player["last_quiz"] = None
        return render_race(player["car_pos"]) + "\n‚úÖ ÂõûÁ≠îÊ≠£Á¢∫ÔºåË´ãËº∏ÂÖ•„ÄéÂâçÈÄ≤„Äè‰ª•Áç≤ÂæóÊñ∞È°åÁõÆÔºÅ"
    else:
        return render_race(player["car_pos"], kana, choice_map) + "\n‚ùå ÂõûÁ≠îÈåØË™§ÔºåË´ãÂÜçË©¶‰∏ÄÊ¨°ÔºÅ"

# üèé Ë≥ΩËªäÈÅäÊà≤Áï´Èù¢È°ØÁ§∫
def render_race(pos, kana=None, options=None):
    track = ["‚¨ú" for _ in range(10)]
    if pos >= len(track):
        return "üèÅ ‰Ω†Ë¥è‰∫ÜÔºÅË≥ΩËªäÊäµÈÅîÁµÇÈªûÔºÅ\nËº∏ÂÖ• '‰∏ªÈÅ∏ÂñÆ' ÈáçÊñ∞ÈñãÂßã"
    track[pos] = "üèé"
    race_line = "üöó Ë≥ΩËªäÈÄ≤Â∫¶Ôºö\n" + ''.join(track)
    if kana and options:
        options_text = "\n".join([f"{key}. {val}" for key, val in options.items()])
        return f"{race_line}\n\n‚ùì Ë´ãÂïè„Äå{kana}„ÄçÁöÑÁæÖÈ¶¨ÊãºÈü≥ÊòØÔºü\n{options_text}\nË´ãÊåâÊåâÈàï‰ΩúÁ≠îÔºàA/B/CÔºâ„ÄÇ"
    return race_line

# üèé Ë≥ΩËªäÈÅäÊà≤ÈÇèËºØ
def race_game(user):
    if user not in players:
        players[user] = {"car_pos": 0, "game": "race", "quiz": None}
    player = players[user]
    if player.get("quiz"):
        kana, correct, choice_map = player["quiz"]
        player["last_quiz"] = (kana, correct, choice_map)
        return render_race(player["car_pos"], kana, choice_map)
    kana, correct = random.choice(list(kana_dict.items()))
    options = [correct]
    while len(options) < 3:
        distractor = random.choice(list(kana_dict.values()))
        if distractor not in options:
            options.append(distractor)
    random.shuffle(options)
    choice_map = {"A": options[0], "B": options[1], "C": options[2]}
    player["quiz"] = (kana, correct, choice_map)
    player["last_quiz"] = (kana, correct, choice_map)
    return render_race(player["car_pos"], kana, choice_map)

# üìò ÂõûÂÇ≥Êó•Ë™û‰∫îÂçÅÈü≥Ë°®Ê†ºÂºèÊñáÂ≠ó
def get_kana_table():
    table = "üìò„ÄêÊó•Ë™û‰∫îÂçÅÈü≥Â∞çÁÖßË°®„Äë"
    groups = [
        ("Ê∏ÖÈü≥ (Âü∫Êú¨Èü≥)", [
            ("„ÅÇ", "a"), ("„ÅÑ", "i"), ("„ÅÜ", "u"), ("„Åà", "e"), ("„Åä", "o"),
            ("„Åã", "ka"), ("„Åç", "ki"), ("„Åè", "ku"), ("„Åë", "ke"), ("„Åì", "ko"),
            ("„Åï", "sa"), ("„Åó", "shi"), ("„Åô", "su"), ("„Åõ", "se"), ("„Åù", "so"),
            ("„Åü", "ta"), ("„Å°", "chi"), ("„Å§", "tsu"), ("„Å¶", "te"), ("„Å®", "to"),
            ("„Å™", "na"), ("„Å´", "ni"), ("„Å¨", "nu"), ("„Å≠", "ne"), ("„ÅÆ", "no"),
            ("„ÅØ", "ha"), ("„Å≤", "hi"), ("„Åµ", "fu"), ("„Å∏", "he"), ("„Åª", "ho"),
            ("„Åæ", "ma"), ("„Åø", "mi"), ("„ÇÄ", "mu"), ("„ÇÅ", "me"), ("„ÇÇ", "mo"),
            ("„ÇÑ", "ya"), ("„ÇÜ", "yu"), ("„Çà", "yo"),
            ("„Çâ", "ra"), ("„Çä", "ri"), ("„Çã", "ru"), ("„Çå", "re"), ("„Çç", "ro"),
            ("„Çè", "wa"), ("„Çí", "wo"), ("„Çì", "n")
        ]),
        ("ÊøÅÈü≥ (Âä†‰∏äÊøÅÈªû)", [
            ("„Åå", "ga"), ("„Åé", "gi"), ("„Åê", "gu"), ("„Åí", "ge"), ("„Åî", "go"),
            ("„Åñ", "za"), ("„Åò", "ji"), ("„Åö", "zu"), ("„Åú", "ze"), ("„Åû", "zo"),
            ("„Å†", "da"), ("„Å¢", "ji"), ("„Å•", "zu"), ("„Åß", "de"), ("„Å©", "do"),
            ("„Å∞", "ba"), ("„Å≥", "bi"), ("„Å∂", "bu"), ("„Åπ", "be"), ("„Åº", "bo")
        ]),
        ("ÂçäÊøÅÈü≥ (Âä†‰∏äÂçäÊøÅÈªû)", [
            ("„Å±", "pa"), ("„Å¥", "pi"), ("„Å∑", "pu"), ("„Å∫", "pe"), ("„ÅΩ", "po")
        ]),
        ("ÊãóÈü≥ (Â∞èÂ≠óÁµÑÂêàÈü≥)", [
            ("„Åç„ÇÉ", "kya"), ("„Åç„ÇÖ", "kyu"), ("„Åç„Çá", "kyo"),
            ("„Åó„ÇÉ", "sha"), ("„Åó„ÇÖ", "shu"), ("„Åó„Çá", "sho"),
            ("„Å°„ÇÉ", "cha"), ("„Å°„ÇÖ", "chu"), ("„Å°„Çá", "cho"),
            ("„Å´„ÇÉ", "nya"), ("„Å´„ÇÖ", "nyu"), ("„Å´„Çá", "nyo"),
            ("„Å≤„ÇÉ", "hya"), ("„Å≤„ÇÖ", "hyu"), ("„Å≤„Çá", "hyo"),
            ("„Åø„ÇÉ", "mya"), ("„Åø„ÇÖ", "myu"), ("„Åø„Çá", "myo"),
            ("„Çä„ÇÉ", "rya"), ("„Çä„ÇÖ", "ryu"), ("„Çä„Çá", "ryo"),
            ("„Åé„ÇÉ", "gya"), ("„Åé„ÇÖ", "gyu"), ("„Åé„Çá", "gyo"),
            ("„Åò„ÇÉ", "ja"), ("„Åò„ÇÖ", "ju"), ("„Åò„Çá", "jo"),
            ("„Å≥„ÇÉ", "bya"), ("„Å≥„ÇÖ", "byu"), ("„Å≥„Çá", "byo"),
            ("„Å¥„ÇÉ", "pya"), ("„Å¥„ÇÖ", "pyu"), ("„Å¥„Çá", "pyo")
        ])
    ]
    for title, kana_group in groups:
        table += f"\n\nüîπ {title}\n"
        for i in range(0, len(kana_group), 5):
            row = kana_group[i:i+5]
            line = "  ".join([f"{kana} ‚Üí {roma}" for kana, roma in row])
            table += line + "\n"
    return table.strip()
